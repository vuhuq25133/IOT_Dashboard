import express from "express";

import changeFan from "../controllers/changeFan.controller.js";
import changeAir from "../controllers/changeAir.controller.js";
import changeLamp from "../controllers/changeLamp.controller.js";
import { getLatestSensors } from "../controllers/latestSensors.controller.js";
import { getActionHistory } from "../controllers/getActionHistory.controller.js";
import { getAllSenSors } from "../controllers/getAllSensors.controller.js";

const router = express.Router();

/**
 * @swagger
 * tags:
 *   - name: Sensor
 *     description: API truy v·∫•n d·ªØ li·ªáu c·∫£m bi·∫øn (DHT11 + BH1750)
 *   - name: Device
 *     description: API ƒëi·ªÅu khi·ªÉn v√† theo d√µi thi·∫øt b·ªã (Qu·∫°t, ƒêi·ªÅu h√≤a, ƒê√®n)
 *   - name: ActionHistory
 *     description: API xem l·ªãch s·ª≠ h√†nh ƒë·ªông ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã
 */

/**
 * @swagger
 * /api/main:
 *   get:
 *     summary: Ki·ªÉm tra t√¨nh tr·∫°ng API backend IoT
 *     tags: [Sensor]
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ danh s√°ch route hi·ªán c√≥.
 */
router.get("/", (req, res) => {
  res.json({
    status: "ok",
    base: "/api/main",
    routes: [
      { method: "GET", path: "/latest-sensors" },
      { method: "GET", path: "/sensors" },
      { method: "GET", path: "/action-history" },
      { method: "POST", path: "/fan/status" },
      { method: "POST", path: "/air/status" },
      { method: "POST", path: "/lamp/status" },
    ],
  });
});


// ============================================================
// üîπ SENSOR DATA
// ============================================================

/**
 * @swagger
 * /api/main/latest-sensors:
 *   get:
 *     summary: L·∫•y 10 b·∫£n ghi c·∫£m bi·∫øn m·ªõi nh·∫•t
 *     tags: [Sensor]
 *     responses:
 *       200:
 *         description: Danh s√°ch 10 b·∫£n ghi c·∫£m bi·∫øn g·∫ßn nh·∫•t
 *         content:
 *           application/json:
 *             example:
 *               - temperature: 27.4
 *                 humidity: 63.2
 *                 light: 45
 *                 timestamp: "2025-10-16T10:20:00Z"
 */
router.get("/latest-sensors", getLatestSensors);

/**
 * @swagger
 * /api/main/sensors:
 *   get:
 *     summary: L·∫•y to√†n b·ªô d·ªØ li·ªáu c·∫£m bi·∫øn (ph√¢n trang, t√¨m ki·∫øm, s·∫Øp x·∫øp)
 *     tags: [Sensor]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema: { type: integer, default: 1 }
 *         description: Trang hi·ªán t·∫°i
 *       - in: query
 *         name: limit
 *         schema: { type: integer, default: 50 }
 *         description: S·ªë b·∫£n ghi m·ªói trang
 *       - in: query
 *         name: sort
 *         schema: { type: string, enum: ["asc", "desc"], default: "desc" }
 *         description: Th·ª© t·ª± s·∫Øp x·∫øp theo th·ªùi gian
 *     responses:
 *       200:
 *         description: Danh s√°ch d·ªØ li·ªáu c·∫£m bi·∫øn theo ph√¢n trang
 */
router.get("/sensors", getAllSenSors);


// ============================================================
// üîπ DEVICE CONTROL
// ============================================================

/**
 * @swagger
 * /api/main/fan/status:
 *   post:
 *     summary: ƒêi·ªÅu khi·ªÉn qu·∫°t (B·∫¨T / T·∫ÆT)
 *     tags: [Device]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - state
 *             properties:
 *               state:
 *                 type: string
 *                 enum: [on, off]
 *                 description: Tr·∫°ng th√°i mu·ªën thay ƒë·ªïi
 *           example:
 *             state: "on"
 *     responses:
 *       200:
 *         description: ƒê√£ g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn th√†nh c√¥ng
 *         content:
 *           application/json:
 *             example:
 *               fanState: "on"
 */
router.post("/fan/status", changeFan);

/**
 * @swagger
 * /api/main/air/status:
 *   post:
 *     summary: ƒêi·ªÅu khi·ªÉn ƒëi·ªÅu h√≤a (B·∫¨T / T·∫ÆT)
 *     tags: [Device]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - state
 *             properties:
 *               state:
 *                 type: string
 *                 enum: [on, off]
 *                 description: Tr·∫°ng th√°i mu·ªën thay ƒë·ªïi
 *           example:
 *             state: "off"
 *     responses:
 *       200:
 *         description: ƒê√£ g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn th√†nh c√¥ng
 *         content:
 *           application/json:
 *             example:
 *               airState: "off"
 */
router.post("/air/status", changeAir);

/**
 * @swagger
 * /api/main/lamp/status:
 *   post:
 *     summary: ƒêi·ªÅu khi·ªÉn ƒë√®n (B·∫¨T / T·∫ÆT)
 *     tags: [Device]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - state
 *             properties:
 *               state:
 *                 type: string
 *                 enum: [on, off]
 *                 description: Tr·∫°ng th√°i mu·ªën thay ƒë·ªïi
 *           example:
 *             state: "on"
 *     responses:
 *       200:
 *         description: ƒê√£ g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn th√†nh c√¥ng
 *         content:
 *           application/json:
 *             example:
 *               lampState: "on"
 */
router.post("/lamp/status", changeLamp);


// ============================================================
// üîπ ACTION HISTORY
// ============================================================

/**
 * @swagger
 * /api/main/action-history:
 *   get:
 *     summary: L·∫•y l·ªãch s·ª≠ h√†nh ƒë·ªông ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã
 *     tags: [ActionHistory]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema: { type: integer, default: 1 }
 *         description: Trang hi·ªán t·∫°i
 *       - in: query
 *         name: limit
 *         schema: { type: integer, default: 10 }
 *         description: S·ªë b·∫£n ghi m·ªói trang
 *       - in: query
 *         name: device
 *         schema: { type: string, enum: [fan, air, lamp] }
 *         description: L·ªçc theo lo·∫°i thi·∫øt b·ªã
 *       - in: query
 *         name: startDate
 *         schema: { type: string, format: date }
 *         description: Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
 *       - in: query
 *         name: endDate
 *         schema: { type: string, format: date }
 *         description: Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
 *     responses:
 *       200:
 *         description: Danh s√°ch l·ªãch s·ª≠ ƒëi·ªÅu khi·ªÉn
 *         content:
 *           application/json:
 *             example:
 *               - device: "fan"
 *                 action: "turn_on"
 *                 newState: "on"
 *                 status: "success"
 *                 timestamp: "2025-10-16T10:25:00Z"
 */
router.get("/action-history", getActionHistory);

export default router;
